<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.28.0-wmf.2</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Apache Spark</title>
    <ns>0</ns>
    <id>42164234</id>
    <revision>
      <id>720956015</id>
      <parentid>720776541</parentid>
      <timestamp>2016-05-18T23:07:41Z</timestamp>
      <contributor>
        <username>Mark viking</username>
        <id>17698045</id>
      </contributor>
      <comment>/* top */ added wl</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17292">{{Infobox Software
| name                   = Apache Spark
| logo                   = [[File:Spark-logo-192x100px.png|frameless|Spark Logo]]
| caption                =
|author = [[Matei Zaharia]]
| developer              = [[Apache Software Foundation]], [[UC Berkeley]] AMPLab, [[Databricks]]
| status                 = Active
| released               = {{Start date and age|2014|05|30}}
| latest release version = v1.6.1
| latest release date    = {{Start date and age|2016|03|09}}
| latest preview version = 
| latest preview date    = 
| operating system       = [[Microsoft Windows]], [[OS X]], [[Linux]]
| size                   = 
| programming language   = [[Scala (programming language)|Scala]], [[Java (programming language)|Java]], [[Python (programming language)|Python]], [[R (programming language)|R]]
| genre                  = Data analytics, [[machine learning]] algorithms
| license                = [[Apache License]] 2.0 
| website                = {{URL|https://spark.apache.org}}
}}
'''Apache Spark''' is an [[Open-source software|open source]] [[distributed computing|cluster computing]] [[Software framework|framework]]. Originally developed at the [[UC Berkeley|University of California, Berkeley]]'s [[AMPLab]], the Spark [[codebase]] was later donated to the [[Apache Software Foundation]] that has maintained it since. Spark provides an [[application programming interface|interface]] for programming entire clusters with implicit [[data parallelism]] and [[fault-tolerant computing|fault-tolerance]].

==Overview==
Apache Spark provides programmers with an [[application programming interface]] centered on a [[data structure]] called the resilient distributed dataset (RDD), a read-only [[multiset]] of data items distributed over a cluster of machines, that is maintained in a [[fault-tolerant computing|fault-tolerant]] way.&lt;ref name=&quot;hc10&quot;&gt;{{cite conference |first1=Matei |last1=Zaharia |first2=Mosharaf |last2=Chowdhury |first3=Michael J. |last3=Franklin |first4=Scott |last4=Shenker |first5=Ion |last5=Stoica |title=Spark: Cluster Computing with Working Sets |conference=USENIX Workshop on Hot Topics in Cloud Computing (HotCloud) |url=https://amplab.cs.berkeley.edu/wp-content/uploads/2011/06/Spark-Cluster-Computing-with-Working-Sets.pdf}}&lt;/ref&gt;
It was developed in response to limitations in the [[MapReduce]] cluster computing [[Programming paradigm|paradigm]], which forces a particular linear [[dataflow]] structure on distributed programs: MapReduce programs read input data from disk, [[Map (parallel pattern)|map]] a function across the data, [[Fold (higher-order function)|reduce]] the results of the map, and store reduction results on disk. Spark's RDDs function as a [[working set]] for distributed programs that offers a (deliberately) restricted form of distributed [[shared memory]].&lt;ref&gt;{{cite conference |first1=Matei |last1=Zaharia |first2=Mosharaf |last2=Chowdhury |first3=Tathagata |last3=Das |first4=Ankur |last4=Dave |first5=Justin |last5=Ma, |first6=Murphy |last6=McCauley |first7=Michael |last7=J. |first8=Scott |last8=Shenker |first9=Ion |last9=Stoica |title=Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing |url=http://www.cs.berkeley.edu/~matei/papers/2012/nsdi_spark.pdf |conference=USENIX Symp. Networked Systems Design and Implementation}}&lt;/ref&gt;

The availability of RDDs facilitates the implementation of both [[iterative algorithm]]s, that visit their dataset multiple times in a loop, and interactive/exploratory data analysis, i.e., the repeated [[database]]-style querying of data. The [[latency (engineering)|latency]] of such applications (compared to [[Apache Hadoop]], a popular MapReduce implementation) may be reduced by several orders of magnitude.{{r|hc10}}&lt;ref&gt;{{cite paper|first1=Reynold| last1=Xin| first2=Josh |last2=Rosen| first3=Matei| last3=Zaharia| first4=Michael| last4=Franklin| first5=Scott| last5=Shenker| first6=Ion| last6=Stoica|title=Shark: SQL and Rich Analytics at Scale| conference=SIGMOD 2013|date=June 2013| url=https://amplab.cs.berkeley.edu/wp-content/uploads/2013/02/shark_sigmod2013.pdf}}&lt;/ref&gt;
Among the class of iterative algorithms are the training algorithms for [[machine learning]] systems, which formed the initial impetus for developing Apache Spark.&lt;ref&gt;{{cite web |title=4 reasons why Spark could jolt Hadoop into hyperdrive |first=Derrick |last=Harris |date=28 June 2014 |url=https://gigaom.com/2014/06/28/4-reasons-why-spark-could-jolt-hadoop-into-hyperdrive/ |website=[[Gigaom]]}}&lt;/ref&gt;

Apache Spark requires a [[cluster manager]] and a [[Clustered file system|distributed storage system]]. For cluster management, Spark supports standalone (native Spark cluster), [[Apache Hadoop|Hadoop YARN]], or [[Apache Mesos]].&lt;ref&gt;{{cite web |url=https://spark.apache.org/docs/1.2.0/cluster-overview.html#cluster-manager-types |title=Cluster Mode Overview - Spark 1.2.0 Documentation - Cluster Manager Types |author=&lt;!--Staff writer(s); no by-line.--&gt; |date=2014-12-18 |website=apache.org |publisher=Apache Foundation |accessdate=2015-01-18}}&lt;/ref&gt; For distributed storage, Spark can interface with a wide variety, including [[Apache Hadoop#Hadoop distributed file system|Hadoop Distributed File System (HDFS)]],&lt;ref&gt;[https://amplab.cs.berkeley.edu/software/ Figure showing Spark in relation to other open-source Software projects including Hadoop]&lt;/ref&gt; [[MapR#MapR converged data platform|MapR File System (MapR-FS)]],&lt;ref&gt;[http://doc.mapr.com/display/MapR/Ecosystem+Support+Matrix MapR ecosystem support matrix]&lt;/ref&gt; [[Apache Cassandra|Cassandra]],&lt;ref&gt;{{cite mailing list |url=http://mail-archives.apache.org/mod_mbox/cassandra-user/201409.mbox/%3CCABNXB2DE5Apmvn1nNg79+VdPCSZiCsGdt=ZB4s4OF_5JzS60iA@mail.gmail.com%3E |title=Re: cassandra + spark / pyspark |date=2014-09-10 |accessdate=2014-11-21 |mailinglist=Cassandra User |last=Doan |first=DuyHai }}&lt;/ref&gt; [[OpenStack#Object Storage (Swift)|OpenStack Swift]], [[Amazon S3]], [http://getkudu.io Kudu], or a custom solution can be implemented. Spark also supports a pseudo-distributed local mode, usually used only for development or testing purposes, where distributed storage is not required and the local file system can be used instead; in such a scenario, Spark is run on a single machine with one executor per [[CPU core]].

===Spark Core===
Spark Core is the foundation of the overall project. It provides distributed task dispatching, scheduling, and basic [[I/O interface|I/O]] functionalities, exposed through an application programming interface (for [[Java]], [[Python (programming language)|Python]], [[Scala (programming language)|Scala]], and [[R (programming language)|R]]) centered on the RDD [[Abstraction (computer science)|abstraction]]. This interface mirrors a [[functional programming|functional]]/[[higher-order programming|higher-order]] model of programming: a &quot;driver&quot; program invokes parallel operations such as map, [[Filter (computer science)|filter]] or reduce on an RDD by passing a function to Spark, which then schedules the function's execution in parallel on the cluster.{{r|hc10}} These operations, and additional ones such as [[Join (database)|joins]], take RDDs as input and produce new RDDs. RDDs are [[Immutable object|immutable]] and their operations are [[lazy evaluation|lazy]]; fault-tolerance is achieved by keeping track of the &quot;lineage&quot; of each RDD, the sequence of operations produced it, so that it can be reconstructed in the case of data loss. RDDs can contain any type of Python, Java, or Scala objects.

Aside from the RDD-oriented functional style of programming, Spark provides two restricted forms of shared variables: ''broadcast variables'' reference read-only data that needs to be available on all nodes, while ''accumulators'' can be used to program reductions in an [[imperative programming|imperative]] style.{{r|hc10}}

A typical example of RDD-centric functional programming is the following Scala program that computes the frequencies of all words occurring in a set of text files and prints the most common ones. Each {{mono|map}}, {{mono|flatMap}} (a variant of {{mono|map}}) and {{mono|reduceByKey}} takes an [[anonymous function]] that performs a simple operation on a single data item (or a pair of items), and applies its argument to transform an RDD into a new RDD.

&lt;source lang=&quot;scala&quot;&gt;
val conf = new SparkConf().setAppName(&quot;wiki_test&quot;)       // create a spark config object
val sc = new SparkContext(conf)                          // Create a spark context
val data = sc.textFile(&quot;/path/to/somedir&quot;)               // Read files from &quot;somedir&quot; into an RDD of (filename, content) pairs.
val tokens = data.flatMap(_.split(&quot; &quot;))                      // Split each file into a list of tokens (words).
val wordFreq = tokens.map((_, 1)).reduceByKey(_ + _)     // Add a count of one to each token, then sum the counts per word type.
wordFreq.sortBy(s =&gt; -s._2).map(x =&gt; (x._2, x._1)).top(10)  // Get the top 10 words. Swap word and count to sort by count.
&lt;/source&gt;

===Spark SQL===
Spark [[SQL]] is a component on top of Spark Core that introduces a new data abstraction called DataFrames,{{efn|Called SchemaRDDs before Spark 1.3.{{Citation needed|date=September 2015}}}} which provides support for structured and [[semi-structured data]]. Spark SQL provides a [[domain-specific language]] to manipulate DataFrames in [[Scala (programming language)|Scala]], [[Java (programming language)|Java]], or [[Python (programming language)|Python]]. It also provides SQL language support, with [[command-line interface]]s and [[Open Database Connectivity|ODBC]]/[[Java Database Connectivity|JDBC]] server.

&lt;source lang=&quot;scala&quot;&gt;
import org.apache.spark.sql.SQLContext

val url = &quot;jdbc:mysql://yourIP:yourPort/test?user=yourUsername;password=yourPassword&quot;   // URL for your database server.
val sqlContext = new org.apache.spark.sql.SQLContext(sc)              // Create a sql context object

val df = sqlContext
    .read
    .format(&quot;jdbc&quot;)
    .option(&quot;url&quot;, url)
    .option(&quot;dbtable&quot;, &quot;people&quot;)
    .load()

df.printSchema() // Looks the schema of this DataFrame.
val countsByAge = df.groupBy(&quot;age&quot;).count() // Counts people by age
&lt;/source&gt;

===Spark Streaming===
Spark Streaming leverages Spark Core's fast scheduling capability to perform [[Event stream processing|streaming analytics]]. It ingests data in mini-batches and performs RDD transformations on those mini-batches of data. This design enables the same set of application code written for batch analytics to be used in streaming analytics, on a single engine.{{Citation needed|date=September 2015}}

===MLlib Machine Learning Library===
Spark MLlib is a [[Distributed computing|distributed]] machine learning framework on top of Spark Core that, due in large part of the distributed memory-based Spark architecture, is as much as nine times as fast as the disk-based implementation used by [[Apache Mahout]] (according to benchmarks done by the MLlib developers against the [[Linear regression|Alternating Least Squares]] (ALS) implementations, and before Mahout itself gained a Spark interface), and [[Scale (computing)|scales]] better than [[Vowpal Wabbit]].&lt;ref&gt;{{cite web |url=http://www.slideshare.net/chaochen5496/mlllib-sparkmeetup8613finalreduced/68 |title=Spark Meetup: MLbase, Distributed Machine Learning with Spark |last1=Sparks |first1=Evan |last2=Talwalkar |first2=Ameet |date=2013-08-06 |website=slideshare.net |publisher=Spark User Meetup, San Francisco, California |accessdate=10 February 2014}}&lt;/ref&gt; Many common machine learning and statistical algorithms have been implemented and are shipped with MLlib which simplifies large scale machine learning [[Pipeline (software)|pipelines]], including:
* [[summary statistics]], [[Correlation and dependence|correlations]], [[stratified sampling]], [[hypothesis testing]], random data generation&lt;ref&gt;{{Cite web|title = MLlib {{!}} Apache Spark|url = http://spark.apache.org/mllib/|website = spark.apache.org|access-date = 2016-01-18}}&lt;/ref&gt;
* [[Statistical classification|classification]] and [[Regression analysis|regression]]: [[support vector machines]], [[logistic regression]], [[linear regression]], decision trees, [[Naive Bayes classifier|naive Bayes classification]]
* [[collaborative filtering]] techniques including alternating least squares (ALS)
* [[Cluster analysis|cluster analysis methods]] including [[K-means clustering|k-means]], and [[Latent Dirichlet allocation|Latent Dirichlet Allocation]] (LDA)
* [[dimensionality reduction|dimensionality reduction techniques]] such as [[singular value decomposition]] (SVD), and [[principal component analysis]] (PCA)
* [[feature extraction]] and [[Data transformation (statistics)|transformation]] functions
* [[optimization (mathematics)|optimization]] algorithms such as [[stochastic gradient descent]], [[limited-memory BFGS]] (L-BFGS)

===GraphX===
GraphX is a distributed [[Graph (abstract data type)|graph processing]] framework on top of Apache Spark. It provides an API for expressing graph computation that can model the [[Google Pregel|Pregel]] abstraction. It also provides an optimized [[Run time (program lifecycle phase)|runtime]] for this abstraction.

Like Apache Spark, GraphX initially started as a research project at UC Berkeley's AMPLab and Databricks, and was later donated to the Apache Software Foundation and the Spark project.&lt;ref&gt;{{cite paper|first1=Joseph| last1=Gonzalez| first2=Reynold |last2=Xin| first3=Ankur| last3=Dave| first4=Daniel| last4=Crankshaw| first5=Michael| last5=Franklin| first6=Ion| last6=Stoica|title=GraphX: Graph Processing in a Distributed Dataflow Framework| conference=OSDI 2014|date=Oct 2014| url=https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-gonzalez.pdf}}&lt;/ref&gt;

==History==
Spark was initially started by [[Matei Zaharia]] at UC Berkeley's AMPLab in 2009, and open sourced in 2010 under a [[BSD licenses|BSD license]].

In 2013, the project was donated to the Apache Software Foundation and switched its license to [[Apache License|Apache 2.0]]. In February 2014, Spark became a [[Apache Software Foundation#Projects|Top-Level Apache Project]].&lt;ref&gt;{{cite web |url=https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces50 |title=The Apache Software Foundation Announces Apache&amp;#8482 Spark&amp;#8482 as a Top-Level Project |author=&lt;!--Staff writer(s); no by-line.--&gt; |date=27 February 2014 |website=apache.org |publisher=Apache Software Foundation |accessdate=4 March 2014}}&lt;/ref&gt;

In November 2014, Spark founder M. Zaharia's company [[Databricks]] set a new world record in large scale sorting using Spark.&lt;ref&gt;[http://databricks.com/blog/2014/11/05/spark-officially-sets-a-new-record-in-large-scale-sorting.html Spark officially sets a new record in large-scale sorting]&lt;/ref&gt;{{third-party inline|date=February 2016}}

Spark had in excess of 1000 contributors in 2015,&lt;ref&gt;[https://www.openhub.net/p/apache-spark Open HUB Spark development activity]&lt;/ref&gt; making it one of the most active projects in the Apache Software Foundation&lt;ref&gt;{{cite web |url=https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces50 |title=The Apache Software Foundation Announces Apache&amp;#8482 Spark&amp;#8482 as a Top-Level Project |author=&lt;!--Staff writer(s); no by-line.--&gt; |date=27 February 2014 |website=apache.org |publisher=Apache Software Foundation |accessdate=4 March 2014}}&lt;/ref&gt; and one of the most active open source [[big data]] projects.&lt;ref name=sparkbigdataproject&gt;[https://intellipaat.com/tutorial/spark-tutorial/ Introduction to Apache Spark]&lt;/ref&gt;

{| class=&quot;wikitable&quot;
|-
! Version
! Original release date
! Latest version
! Release date
|-
| {{Version|o|0.5}}
| 2012-06-12
| 0.5.1
| 2012-10-07
|-
| {{Version|o|0.6}}
| 2012-10-14
| 0.6.1
| 2012-11-16
|-
| {{Version|o|0.7}}
| 2013-02-27
| 0.7.3
| 2013-07-16
|-
| {{Version|o|0.8}}
| 2013-09-25
| 0.8.1
| 2013-12-19
|-
| {{Version|o|0.9}}
| 2014-02-02
| 0.9.2
| 2014-07-23
|-
| {{Version|o|1.0}}
| 2014-05-30
| 1.0.2
| 2014-08-05
|-
| {{Version|o|1.1}}
| 2014-09-11
| 1.1.1
| 2014-11-26
|-
| {{Version|o|1.2}}
| 2014-12-18
| 1.2.2
| 2015-04-17
|-
| {{Version|c|1.3}}
| 2015-03-13
| 1.3.1
| 2015-04-17
|-
| {{Version|c|1.4}}
| 2015-06-11
| 1.4.1
| 2015-07-15
|-
| {{Version|c|1.5}}
| 2015-09-09
| 1.5.2
| 2015-11-09
|-
| {{Version|c|1.6}}
| 2016-01-04
| 1.6.1
| 2016-03-09
|-
| {{Version|p|2.0}}
| 2016
| 2.0.0
| 2016
|-
| colspan=&quot;5&quot; | &lt;small&gt;{{Version |l |show=111110}}&lt;/small&gt;
|}
&lt;!-- o=Old-Not-Supported; c=Released; p=Planned-Future --&gt;

==Notes==
{{notelist}}

==References==
{{Reflist|30em}}

==External links==
*{{Official website}}
*[https://spark.apache.org/sql/ Spark SQL]
*[https://spark.apache.org/streaming/ Spark Streaming]
*[https://spark.apache.org/mllib/ MLlib machine learning library]
*[https://spark.apache.org/graphx/ GraphX graph processing library]

{{Apache}}
{{DEFAULTSORT:Spark}}

[[Category:Apache Software Foundation|Spark]]
[[Category:Big data products]]
[[Category:Cluster computing]]
[[Category:Data mining and machine learning software]]
[[Category:Free software programmed in Scala]]
[[Category:Hadoop]]
[[Category:Java platform]]
[[Category:Software using the Apache license]]
[[Category:University of California, Berkeley]]</text>
      <sha1>laq8iqeqvyj3bocl0yqi0t9b6yauoby</sha1>
    </revision>
  </page>
  <page>
    <title>Apache Hadoop</title>
    <ns>0</ns>
    <id>5919308</id>
    <revision>
      <id>721269142</id>
      <parentid>721260800</parentid>
      <timestamp>2016-05-20T18:11:50Z</timestamp>
      <contributor>
        <username>Scottprovost</username>
        <id>1659966</id>
      </contributor>
      <comment>Undid revision 721260800 by [[Special:Contributions/Riponpatgiri|Riponpatgiri]] ([[User talk:Riponpatgiri|talk]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55583">{{multiple issues|
{{advert|date=October 2013}}
{{buzzword|date=October 2013}}
}}
{{Infobox software
| name                   = Apache Hadoop
| logo                   = [[File:Hadoop logo.svg|frameless|Hadoop Logo]]
| screenshot             =
| caption                =
| developer              = [[Apache Software Foundation]]
| status                 = Active
| released              = {{Start date and age|2011|12|10}}&lt;ref&gt;{{cite web |url=http://hadoop.apache.org/releases.html#27+December%2C+2011%3A+release+1.0.0+available |title=Hadoop Releases &lt;!-- |author=Staff writer(s); no by-line.--&gt; |website=apache.org |publisher=Apache Software Foundation |accessdate=2014-12-06}}&lt;/ref&gt;
| latest release version = 2.7.2
| latest release date    = {{release date|2016|01|25}}&lt;ref name=&quot;Hadoop Releases&quot;&gt;{{cite web|url=http://hadoop.apache.org/releases.html |title=Hadoop Releases |publisher=Hadoop.apache.org |accessdate=2016-01-31}}&lt;/ref&gt;
| operating system       = [[Cross-platform]]
| programming language   = [[Java (programming language)|Java]]
| genre                  = [[Distributed file system]]
| posix compliant        = Not [[POSIX]]-compliant
| license                = [[Apache License]] 2.0
| website                = {{Official URL}}
}}

'''Apache Hadoop''' ({{IPAc-en|pron|h|ə|ˈ|d|u:|p}}) is an [[open source|open-source]] [[software framework]] for [[Clustered file system|distributed storage]] and [[distributed processing]] of very large data sets on [[computer cluster]]s built from [[commodity hardware]]. All the modules in Hadoop are designed with a fundamental assumption that hardware failures are common and should be automatically handled by the framework.&lt;ref name=&quot;homepage&quot;&gt;{{Cite web|title= Welcome to Apache Hadoop!|url= http://hadoop.apache.org|website= hadoop.apache.org|accessdate = 2015-12-16}}&lt;/ref&gt;

The core of Apache Hadoop consists of a storage part, known as [[#HDFS|Hadoop Distributed File System]] (HDFS), and a processing part called [[MapReduce]]. Hadoop splits files into large blocks and distributes them across nodes in a cluster. To process data, Hadoop transfers [[JAR (file format)|packaged code]] for nodes to process in parallel based on the data that needs to be processed. This approach takes advantage of [[data locality]]&lt;ref&gt;{{cite web |url=http://www-01.ibm.com/software/data/infosphere/hadoop/hdfs/ |title=What is the Hadoop Distributed File System (HDFS)? &lt;!-- |author

=Staff writer(s); no by-line.--&gt; |website=ibm.com |publisher=[[IBM]] |accessdate=2014-10-30 }}&lt;/ref&gt;— nodes manipulating the data they have access to— to allow the dataset to be [[distributed processing|processed]] faster and more efficiently than it would be in a more conventional [[supercomputer architecture]] that relies on a [[parallel file system]] where computation and data are distributed via high-speed networking.&lt;ref&gt;{{cite web |url=http://www.datascienceassn.org/content/data-locality-hpc-vs-hadoop-vs-spark |title=Data Locality: HPC vs. Hadoop vs. Spark |last1=Malak |first1=Michael |date=2014-09-19 |website=datascienceassn.org |publisher=Data Science Association |accessdate=2014-10-30 }}&lt;/ref&gt;

The base Apache Hadoop framework is composed of the following modules:
*''Hadoop Common'' – contains libraries and utilities needed by other Hadoop modules;
*''Hadoop Distributed File System (HDFS)'' – a distributed file-system that stores data on commodity machines, providing very high aggregate bandwidth across the cluster;
*''Hadoop YARN'' – a resource-management platform responsible for managing computing resources in clusters and using them for scheduling of users' applications;&lt;ref&gt;{{cite web |url=http://hadoop.apache.org/docs/r2.5.1/api/org/apache/hadoop/yarn/api/records/Resource.html#newInstance(int,%20int) |title=Resource (Apache Hadoop Main 2.5.1 API) &lt;!-- |author=Staff writer(s); no by-line.--&gt; |date=2014-09-12 |website=apache.org |publisher=Apache Software Foundation |accessdate=2014-09-30 }}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://hortonworks.com/blog/apache-hadoop-yarn-concepts-and-applications/ |title=Apache Hadoop YARN – Concepts and Applications |last1=Murthy |first1=Arun |date=2012-08-15 |website=hortonworks.com |publisher=Hortonworks |accessdate=2014-09-30 }}&lt;/ref&gt; and
*''Hadoop MapReduce'' – an implementation of the [[MapReduce]] programming model for large scale data processing.

The term ''Hadoop'' has come to refer not just to the base modules above, but also to the ''ecosystem'',&lt;ref&gt;{{cite web |url=http://finance.yahoo.com/news/continuuity-raises-10-million-series-120500471.html |title=Continuuity Raises $10 Million Series A Round to Ignite Big Data Application Development Within the Hadoop Ecosystem &lt;!-- |author=Staff writer(s); no by-line.--&gt; |date=2012-11-14 |website=finance.yahoo.com |publisher=[[Marketwired]] |accessdate=2014-10-30 }}&lt;/ref&gt; or collection of additional software packages that can be installed on top of or alongside Hadoop, such as [[Pig (programming tool)|Apache Pig]], [[Apache Hive]], [[Apache HBase]], [[Apache Phoenix]], [[Apache Spark]], [[Apache ZooKeeper]], [[Cloudera Impala]], [[Apache Flume]], [[Apache Sqoop]], [[Apache Oozie]], [[Apache Storm]].&lt;ref&gt;{{cite web |url=http://hadoop.apache.org/ |title=Hadoop-related projects at |publisher=Hadoop.apache.org |accessdate=2013-10-17 }}&lt;/ref&gt;

Apache Hadoop's MapReduce and HDFS components were inspired by [[Google]] papers on their [[MapReduce]] and [[Google File System]].&lt;ref&gt;{{cite book &lt;!-- |author=Staff writer(s); no by-line.--&gt; |title=Data Science and Big Data Analytics: Discovering, Analyzing, Visualizing and Presenting Data |url=https://books.google.com/books?id=axruBQAAQBAJ&amp;pg=PA300|publisher=John Wiley &amp; Sons |page=300 |date=2014-12-19 |isbn=9781118876220 |access-date=2015-01-29 }}&lt;/ref&gt;

The Hadoop framework itself is mostly written in the [[Java (programming language)|Java programming language]], with some native code in [[C (programming language)|C]] and [[Command-line interface|command line]] utilities written as [[shell scripts]]. Though MapReduce Java code is common, any programming language can be used with &quot;Hadoop Streaming&quot; to implement the &quot;map&quot; and &quot;reduce&quot; parts of the user's program.&lt;ref&gt;{{cite web |url=http://www.mail-archive.com/nlpatumd@yahoogroups.com/msg00570.html |title=[nlpatumd&amp;#93; Adventures with Hadoop and Perl |publisher=Mail-archive.com |date=2010-05-02 |accessdate=2013-04-05 }}&lt;/ref&gt; Other projects in the Hadoop ecosystem expose richer user interfaces.

==History==
The genesis of Hadoop came from the Google File System paper&lt;ref&gt;{{cite web|url=http://research.google.com/archive/gfs.html|title=The Google File System|first1=Sanjay|last1=Ghemawat|first2=Howard|last2=Gobioff|first3=Shun-Tak|last3=Leung}}&lt;/ref&gt; that was published in October 2003. This paper spawned another research paper from Google - MapReduce: Simplified Data Processing on Large Clusters.&lt;ref&gt;{{cite web|url=http://research.google.com/archive/mapreduce.html|title=MapReduce: Simplified Data Processing on Large Clusters|first1=Jeffrey|last1=Dean|first2=Sanjay|last2=Ghemawat}}&lt;/ref&gt; Development started in the Apache Nutch project, but was moved to the new Hadoop subproject in January 2006.&lt;ref&gt;{{cite web|url=https://issues.apache.org/jira/browse/INFRA-700|title=new mailing lists request: hadoop|last=Cutting|first=Doug|date=28 Jan 2006|website=issues.apache.org|quote=The Lucene PMC has voted to split part of Nutch into a new sub-project named Hadoop}}&lt;/ref&gt; [[Doug Cutting]], who was working at [[Yahoo!]] at the time,&lt;ref&gt;{{cite web|url=https://intellipaat.com/blog/hadoop-creator-goes-to-cloudera/|title=Hadoop Creator goes to Cloudera|author=Intellipaat|work=Intellipaat Blog|accessdate=2 February 2016}}&lt;/ref&gt; named it after his son's toy elephant.&lt;ref&gt;{{cite news |title=Hadoop, a Free Software Program, Finds Uses Beyond Search |first=Ashlee |last=Vance |newspaper=The New York Times |date=2009-03-17 |url=http://www.nytimes.com/2009/03/17/technology/business-computing/17cloud.html |accessdate=2010-01-20 | archiveurl= http://web.archive.org/web/20100211022503/http://www.nytimes.com/2009/03/17/technology/business-computing/17cloud.html? |archivedate=11 February 2010 &lt;!--DASHBot--&gt;| deadurl=no }}&lt;/ref&gt; The initial code that was factored out of Nutch consisted of 5k lines of code for NDFS and 6k lines of code for MapReduce.

The first committer added to the Hadoop project was Owen O’Malley in March 2006.&lt;ref&gt;{{cite mailing list|first=Doug|last=Cutting|author-link=Doug Cutting|title=[RESULT] VOTE: add Owen O'Malley as Hadoop committer|mailing-list=hadoop-common-dev|date=30 March 2006|url=http://mail-archives.apache.org/mod_mbox/hadoop-common-dev/200603.mbox/%3C442B27A6.8080500@apache.org%3E}}&lt;/ref&gt; Hadoop 0.1.0 was released in April 2006 &lt;ref&gt;{{cite web|url=https://archive.apache.org/dist/hadoop/core/|title=archive.apache.org}}&lt;/ref&gt; and continues to evolve by the many contributors&lt;ref&gt;{{cite web|url=https://hadoop.apache.org/who.html|title=Apache Hadoop Project Members}}&lt;/ref&gt; to the Apache Hadoop project.

==Timeline==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! style=&quot;width:6%&quot; | Year || style=&quot;width:10%&quot; | Month || Event || Ref.
|-
|2003||October||Google File System paper released ||&lt;ref&gt;
{{cite web 
| title = Google Research Publication: The Google File System 
| url = http://research.google.com/archive/gfs.html 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2004||December||MapReduce: Simplified Data Processing on Large Clusters||&lt;ref&gt;
{{cite web 
| title = Google Research Publication: MapReduce 
| url = http://research.google.com/archive/mapreduce.html 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2006||January||Hadoop subproject created with mailing lists, jira, and wiki||&lt;ref&gt;
{{cite web 
| title = [INFRA-700] new mailing lists request: hadoop - ASF JIRA 
| url = https://issues.apache.org/jira/browse/INFRA-700 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2006||January||Hadoop is born from Nutch 197 ||&lt;ref&gt;
{{cite web 
| title = [HADOOP-1] initial import of code from Nutch - ASF JIRA 
| url = https://issues.apache.org/jira/browse/HADOOP-1 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2006||February||NDFS+ MapReduce moved out of Apache Nutch to create Hadoop||&lt;ref name=&quot;tom-white-book&quot;&gt;{{cite book
| last =White
| first =Tom
| title =Hadoop: The Definitive Guide
| publisher =O'Reilly
| edition =3rd
| date =2012
| isbn = 9781449328917}}&lt;/ref&gt;
|-
|2006||February||Owen Omalley's first patch goes into Hadoop||&lt;ref&gt;
{{cite web 
| title = [NUTCH-197] NullPointerException in TaskRunner if application jar does not have &quot;lib&quot; directory - ASF JIRA 
| url = https://issues.apache.org/jira/browse/NUTCH-197 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2006||February||Hadoop is named after Cutting's son's yellow plush toy||&lt;ref name=&quot;datanami.com&quot;&gt;{{cite web 
| title = From Spiders to Elephants: The History of Hadoop 
| url = http://www.datanami.com/2015/04/15/from-spiders-to-elephants-the-history-of-hadoop/ 
| accessdate = 2016-03-09 
 }}&lt;/ref&gt;
|-
|2006||April||Hadoop 0.1.0 released||&lt;ref&gt;
{{cite web 
| title = Index of /dist/hadoop/core 
| url = https://archive.apache.org/dist/hadoop/core/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2006||April||Hadoop sorts 1.8TB on 188 nodes in 47.9 hours||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2006||May||Yahoo deploys 300 machine Hadoop cluster||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2006||October||Yahoo Hadoop cluster reaches 600 machines||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2007||April||Yahoo runs 2 clusters of 1,000 machines||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2007||June||Only 3 companies on &quot;Powered by Hadoop Page&quot;||&lt;ref name=&quot;powered-by-hadoop&quot;&gt;
{{cite web 
| title = Hadoop Summit 2009 
| url = http://riccomini.name/posts/hadoop/2009-06-13-hadoop-summit-2009/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2007||October||First release of Hadoop that includes HBase||&lt;ref&gt;
{{cite web 
| title = Apache Hadoop Releases 
| url = http://hadoop.apache.org/releases.html 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2007||October||Yahoo Labs creates Pig, and donates it to the ASF||&lt;ref&gt;{{cite book
| last =Gates
| first =Alan
| title =Programming Pig
| publisher =O'Reilly
| date =2011
| page =10
| isbn = 978-1-4493-0264-1}}&lt;/ref&gt;
|-
|2008||January||YARN JIRA opened||Yarn Jira (Mapreduce 279)
|-
|2008||January||20 companies on &quot;Powered by Hadoop Page&quot;||&lt;ref name=&quot;powered-by-hadoop&quot; /&gt;
|-
|2008||February||Yahoo moves its web index onto Hadoop||&lt;ref&gt;
{{cite web 
| title = Yahoo! Launches World’s Largest Hadoop Production Application | work=hadoopnew - Yahoo 
| url = https://developer.yahoo.com/blogs/hadoop/yahoo-launches-world-largest-hadoop-production-application-398.html 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2008||February||Yahoo! production search index generated by a 10,000-core Hadoop cluster||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2008||March||First Hadoop Summit||&lt;ref&gt;
{{cite web 
| title = RE: Hadoop summit / workshop at Yahoo! 
| url = http://mail-archives.apache.org/mod_mbox/hadoop-common-user/200802.mbox/%3CDD27C9769EA63D43BE3CF4CCCC12DD977ED49E@SNV-EXVS02.ds.corp.yahoo.com%3E 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2008||April||Hadoop world record fastest system to sort a terabyte of data. Running on a 910-node cluster, Hadoop sorted one terabyte in 209 seconds||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2008||May||Hadoop wins TeraByte Sort (World Record sortbenchmark.org)||&lt;ref&gt;http://sortbenchmark.org/YahooHadoop.pdf&lt;/ref&gt;
|-
|2008||July||Hadoop wins Terabyte Sort Benchmark||&lt;ref&gt;
{{cite web 
| title = Apache Hadoop Wins Terabyte Sort Benchmark | work=hadoopnew - Yahoo 
| url = https://developer.yahoo.com/blogs/hadoop/apache-hadoop-wins-terabyte-sort-benchmark-408.html 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2008||October||Loading 10TB/day in Yahoo clusters||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2008||October||Cloudera, Hadoop distributor is founded||&lt;ref&gt;
{{cite web 
| title = Cloudera
| url = https://www.crunchbase.com/organization/cloudera#/entity 
| accessdate = 2016-03-09 
 }}&lt;/ref&gt;
|-
|2008||November||Google MapReduce implementation sorted one terabyte in 68 seconds||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2009||March||Yahoo runs 17 clusters with 24,000 machines||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2009||April||Hadoop sorts a petabyte||&lt;ref&gt;http://sortbenchmark.org/Yahoo2009.pdf&lt;/ref&gt;
|-
|2009||May||Yahoo! used Hadoop to sort one terabyte in 62 seconds||&lt;ref name=&quot;tom-white-book&quot; /&gt;
|-
|2009||June||Second Hadoop Summit||&lt;ref&gt;http://www.mollynix.com/images_content/01commdes/hadoopschedulepdf.pdf&lt;/ref&gt;
|-
|2009||June||Second Hadoop Summit||&lt;ref&gt;
{{cite web 
| title = Hadoop Summit 2009 Tickets, Wed, Jun 10, 2009 at 8:00 AM
| url = http://www.eventbrite.com/e/hadoop-summit-2009-tickets-338131360 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2009||July||Hadoop Core is renamed Hadoop Common||&lt;ref name=&quot;hadoop-apache-org&quot;&gt;
{{cite web 
| title = Welcome to Apache™ Hadoop®! 
| url = http://hadoop.apache.org/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2009||July||MapR, Hadoop distributor founded||&lt;ref&gt;
{{cite web 
| title = MapR Technologies
| url = https://www.crunchbase.com/organization/mapr-technologies#/entity 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2009||July||HDFS now a separate subproject||&lt;ref name=&quot;hadoop-apache-org&quot; /&gt;
|-
|2009||July||MapReduce now a separate subproject||&lt;ref name=&quot;hadoop-apache-org&quot; /&gt;
|-
|2010||January||Kerberos support added to Hadoop||&lt;ref&gt;{{cite web |url=https://thinkbiganalytics.com/yahoo-updates-from-hadoop-summit-2010/ |title=Yahoo! Updates from Hadoop Summit 2010 |publisher=Think Big Analytics |accessdate=April 25, 2016 |quote=Baldeschwieler announced that Yahoo has released a beta test of Hadoop Security, which uses Kerberos for authentication and allows colocation of business sensitive data within the same cluster.}}&lt;/ref&gt;
|-
|2010||May||Apache HBase Graduates||&lt;ref&gt;
{{cite web 
| title = Apache HBase – Apache HBase™ Home 
| url = http://hbase.apache.org/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2010||June||Third Hadoop Summit||&lt;ref&gt;
{{cite web 
| title = Hadoop Summit 2010 – Agenda is available! | work=hadoopnew - Yahoo 
| url = https://developer.yahoo.com/blogs/hadoop/hadoop-summit-2010-agenda-available-455.html 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2010||June||Yahoo 4,000 nodes/70 petabytes ||&lt;ref name=&quot;hadoop-summit-2010&quot;&gt;
{{cite web 
| title = Hadoop Summit 2010
| url = http://perspectives.mvdirona.com/2010/07/hadoop-summit-2010/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2010||June||Facebook 2,300 clusters/40 petabytes ||&lt;ref name=&quot;hadoop-summit-2010&quot; /&gt;
|-
|2010||September||Apache Hive Graduates||&lt;ref&gt;
{{cite web 
| title = Apache Hive TM 
| url = http://hive.apache.org/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2010||September||Apache Pig Graduates||&lt;ref&gt;
{{cite web 
| title = Welcome to Apache Pig! 
| url = http://pig.apache.org/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2011||January||Apache Zookeeper Graduates ||&lt;ref&gt;
{{cite web 
| title = Apache ZooKeeper - Home 
| url = http://zookeeper.apache.org/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2011||January||Facebook, LinkedIn, eBay and IBM collectively contribute 200,000 lines of code ||&lt;ref name=&quot;contributions-to-apache-hadoop&quot;&gt;
{{cite web 
| title = Reality Check: Contributions to Apache Hadoop - Hortonworks 
| url = http://hortonworks.com/blog/reality-check-contributions-to-apache-hadoop/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2011||March||Apache Hadoop takes top prize at Media Guardian Innovation Awards||&lt;ref&gt;
{{cite web 
| title = Apache Hadoop takes top prize at Media Guardian Innovation Awards |work= The Guardian 
| url = http://www.theguardian.com/technology/2011/mar/25/media-guardian-innovation-awards-apache-hadoop 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2011||June||Rob Beardon and Eric Badleschieler spin out Hortonworks out of Yahoo.||&lt;ref name=&quot;history-of-hadoop&quot;&gt;
{{cite web 
| title = The history of Hadoop: From 4 nodes to the future of data | publisher=Gigaom 
| url = https://gigaom.com/2013/03/04/the-history-of-hadoop-from-4-nodes-to-the-future-of-data/ 
| accessdate = 2016-03-09 
| first = Derrick 
| last = Harris 
 }}
&lt;/ref&gt;
|-
|2011||June||Yahoo has 42K Hadoop notes and hundreds of petabytes of storage||&lt;ref name=&quot;history-of-hadoop&quot; /&gt;
|-
|2011||June||Third Annual Hadoop Summit (1,700 attendees)||&lt;ref&gt;
{{cite web 
| title = Hadoop Summit 2011: June 29th, Santa Clara Convention Center | work= hadoopnew - Yahoo 
| url = https://developer.yahoo.com/blogs/hadoop/hadoop-summit-2011-june-29th-santa-clara-convention-5061.html 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2011||October||Debate over which company had contributed more to Hadoop.||&lt;ref name=&quot;contributions-to-apache-hadoop&quot; /&gt;
|-
|2012||January||Hadoop community moves to separate from MapReduce and replace with YARN||&lt;ref name=&quot;datanami.com&quot;/&gt;
|-
|2012||June||San Jose Hadoop Summit (2,100 attendees)||&lt;ref&gt;
{{cite web 
| title = Fifth Annual Hadoop Summit 2012 Kicks Off with Record Attendance - Hortonworks 
| url = http://hortonworks.com/press-releases/fifth-annual-hadoop-summit-2012-kicks-off-with-record-attendance/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2012||November||Apache Hadoop 1.0 Available||&lt;ref name=&quot;hadoop-apache-org&quot; /&gt;
|-
|2013||March||Hadoop Summit - Amsterdam (500 attendees)||&lt;ref&gt;
{{cite web 
| title = Hadoop Summit 2013 Amsterdam - It's A Wrap! - Hortonworks 
| url = http://hortonworks.com/blog/hadoop-summit-2013-amsterdam-its-a-wrap/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2013||March||YARN deployed in production at Yahoo||&lt;ref&gt;
{{cite web 
| title = Hadoop at Yahoo!: More Than Ever Before 
| url = https://developer.yahoo.com/blogs/ydn/hadoop-yahoo-more-ever-54421.html 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2013||June||San Jose Hadoop Summit (2,700 attendees)||&lt;ref&gt;
{{cite web 
| title = Hadoop Summit North America 2013 Draws Record Ecosystem Support | work= Business Wire 
| url = http://www.businesswire.com/news/home/20130610006449/en/Hadoop-Summit-North-America-2013-Draws-Record 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2013||October||Apache Hadoop 2.2 Available||&lt;ref name=&quot;hadoop-apache-org&quot; /&gt;
|-
|2014||February||Apache Hadoop 2.3 Available||&lt;ref name=&quot;hadoop-apache-org&quot; /&gt;
|-
|2014||February||Apache Spark top Level Apache Project||&lt;ref&gt;
{{cite web 
| title = The Apache Software Foundation Announces Apache™ Spark™ as a Top-Level Project : The Apache Software Foundation Blog 
| url = https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces50 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2014||April||Hadoop summit Amsterdam (750 attendees)||&lt;ref&gt;
{{cite web 
| title = Loved Hadoop Summit Europe 2014 - Hope you did too! - SAP HANA 
| url = https://blogs.saphana.com/2014/04/14/loved-hadoop-summit-europe-2014-hope-you-did-too/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2014||June||Apache Hadoop 2.4 Available||&lt;ref name=&quot;hadoop-apache-org&quot; /&gt;
|-
|2014||June||San Jose Hadoop Summit (3,200 attendees)||&lt;ref&gt;
{{cite web 
| title = Hadoop Summit 2014 – Big Data Keeps Getting Bigger |publisher=Pentaho 
| url = http://www.pentaho.com/blog/2014/06/06/hadoop-summit-2014-big-data-keeps-getting-bigger 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2014||August||Apache Hadoop 2.5 Available||&lt;ref name=&quot;hadoop-apache-org&quot; /&gt;
|-
|2014||November||Apache Hadoop 2.6 Available||&lt;ref name=&quot;hadoop-apache-org&quot; /&gt;
|-
|2015||April||Hadoop Summit Europe||&lt;ref&gt;
{{cite web 
| title = Hadoop Summit Europe 2015, 15th-16th April 2015 |publisher= Lanyrd 
| url = http://lanyrd.com/2015/hadoopsummit/ 
| accessdate = 2016-03-09 
 }}
&lt;/ref&gt;
|-
|2015||June||Apache Hadoop 2.7 Available||&lt;ref name=&quot;hadoop-apache-org&quot; /&gt;
|}

==Architecture==
{{See also|#Hadoop_distributed_file_system|Apache HBase|MapReduce|l1=Hadoop Distributed File System}}

Hadoop consists of the ''Hadoop Common'' package, which provides filesystem and OS level abstractions, a MapReduce engine (either MapReduce/MR1 or YARN/MR2)&lt;ref&gt;{{cite web |url=http://blog.cloudera.com/blog/2012/10/mr2-and-yarn-briefly-explained/ |title=MR2 and YARN Briefly Explained |first=Harsh |last=Chouraria |date=21 October 2012 |website=cloudera.com |publisher=[[Cloudera]] |accessdate=23 October 2013 }}&lt;/ref&gt; and the [[#Hadoop distributed file system|Hadoop Distributed File System]] (HDFS). The Hadoop Common package contains the necessary [[JAR (file format)|Java ARchive (JAR)]] files and scripts needed to start Hadoop.

For effective scheduling of work, every Hadoop-compatible file system should provide location awareness: the name of the rack (more precisely, of the network switch) where a worker node is. Hadoop applications can use this information to execute code on the node where the data is, and, failing that, on the same rack/switch to reduce backbone traffic. HDFS uses this method when replicating data for data redundancy across multiple racks. This approach reduces the impact of a rack power outage or switch failure; if one of these hardware failures occurs, the data will remain available.&lt;ref&gt;{{cite web |url=http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsUserGuide.html |title=HDFS User Guide |publisher=Hadoop.apache.org |accessdate=2014-09-04 }}&lt;/ref&gt;
[[File:Hadoop 1.png|thumb|upright=1.2|right|alt=Hadoop cluster|A multi-node Hadoop cluster]]

A small Hadoop cluster includes a single master and multiple worker nodes. The master node consists of a Job Tracker, Task Tracker, NameNode, and DataNode. A slave or ''worker node'' acts as both a DataNode and TaskTracker, though it is possible to have data-only worker nodes and compute-only worker nodes. These are normally used only in nonstandard applications.&lt;ref name=&quot;michael-noll.com_2&quot;&gt;{{cite web |title=Running Hadoop on Ubuntu Linux System(Multi-Node Cluster) |url=http://www.michael-noll.com/tutorials/running-hadoop-on-ubuntu-linux-multi-node-cluster/ }}&lt;/ref&gt;

Hadoop requires [[JRE|Java Runtime Environment]] (JRE) 1.6 or higher. The standard startup and shutdown scripts require that [[Secure Shell]] (ssh) be set up between nodes in the cluster.&lt;ref name=&quot;michael-noll.com_1&quot;&gt;{{cite web |title=Running Hadoop on Ubuntu Linux (Single-Node Cluster) |url=http://www.michael-noll.com/tutorials/running-hadoop-on-ubuntu-linux-single-node-cluster/#prerequisites |accessdate=6 June 2013 }}&lt;/ref&gt;

In a larger cluster, HDFS nodes are managed through a dedicated NameNode server to host the file system index, and a secondary NameNode that can generate snapshots of the namenode's memory structures, thereby preventing file-system corruption and loss of data. Similarly, a standalone JobTracker server can manage job scheduling across nodes. When Hadoop MapReduce is used with an alternate file system, the NameNode, secondary NameNode, and DataNode architecture of HDFS are replaced by the file-system-specific equivalents.

===File systems===

===={{Anchor|HDFS}}Hadoop distributed file system====
The Hadoop distributed file system (HDFS) is a distributed, scalable, and portable file-system written in [[Java (software platform)|Java]] for the Hadoop framework. A Hadoop cluster has nominally a single namenode plus a cluster of datanodes, although [[redundancy (engineering)|redundancy]] options are available for the namenode due to its criticality. Each datanode serves up blocks of data over the network using a block protocol specific to HDFS. The file system uses [[TCP/IP]] [[Internet socket|sockets]] for communication. Clients use [[remote procedure call]] (RPC) to communicate between each other.

HDFS stores large files (typically in the range of gigabytes to terabytes&lt;ref&gt;
{{cite web |title=HDFS Architecture |url=http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Large_Data_Sets |accessdate=1 September 2013 }}
&lt;/ref&gt;) across multiple machines. It achieves reliability by [[Replication (computer science)|replicating]] the data across multiple hosts, and hence theoretically does not require [[RAID]] storage on hosts (but to increase I/O performance some RAID configurations are still useful). With the default replication value, 3, data is stored on three nodes: two on the same rack, and one on a different rack. Data nodes can talk to each other to rebalance data, to move copies around, and to keep the replication of data high. HDFS is not fully [[POSIX]]-compliant, because the requirements for a POSIX file-system differ from the target goals for a Hadoop application. The trade-off of not having a fully POSIX-compliant file-system is increased performance for data [[throughput]] and support for non-POSIX operations such as Append.&lt;ref name=&quot;openlibrary1&quot;&gt;
{{Cite journal
|publisher = Amazon.com
|first = Yaniv |last = Pessach
|url = http://openlibrary.org/books/OL25423189M/Distributed_Storage_Concepts_Algorithms_and_Implementations
|title = Distributed Storage
|edition = Distributed Storage: Concepts, Algorithms, and Implementations
|publication-date = 2013
|postscript = &lt;!-- Bot inserted parameter. Either remove it; or change its value to &quot;.&quot; for the cite to end in a &quot;.&quot;, as necessary. --&gt;{{inconsistent citations}}
}}&lt;/ref&gt;

HDFS added the high-availability capabilities, as announced for release 2.0 in May 2012,&lt;ref name=&quot;failover&quot;&gt;{{cite web |title=Version 2.0 provides for manual failover and they are working on automatic failover: |url=https://hadoop.apache.org/releases.html#23+May%2C+2012%3A+Release+2.0.0-alpha+available  |accessdate= 30 July 2013 |publisher=Hadoop.apache.org }}&lt;/ref&gt; letting the main metadata server (the NameNode) fail over manually to a backup. The project has also started developing automatic [[fail-over]]. 

The HDFS file system includes a so-called ''secondary namenode'', a misleading name that some might incorrectly interpret as a backup namenode for when the primary namenode goes offline. In fact, the secondary namenode regularly connects with the primary namenode and builds snapshots of the primary namenode's directory information, which the system then saves to local or remote directories. These checkpointed images can be used to restart a failed primary namenode without having to replay the entire journal of file-system actions, then to edit the log to create an up-to-date directory structure. Because the namenode is the single point for storage and management of metadata, it can become a bottleneck for supporting a huge number of files, especially a large number of small files. HDFS Federation, a new addition, aims to tackle this problem to a certain extent by allowing multiple namespaces served by separate namenodes. Moreover, there are some issues in HDFS, namely, small file issue, scalability problem, Single Point of Failure (SPoF), and bottleneck in huge metadata request. 
An advantage of using HDFS is data awareness between the job tracker and task tracker. The job tracker schedules map or reduce jobs to task trackers with an awareness of the data location. For example: if node A contains data (x,y,z) and node B contains data (a,b,c), the job tracker schedules node B to perform map or reduce tasks on (a,b,c) and node A would be scheduled to perform map or reduce tasks on (x,y,z). This reduces the amount of traffic that goes over the network and prevents unnecessary data transfer. When Hadoop is used with other file systems, this advantage is not always available. This can have a significant impact on job-completion times, which has been demonstrated when running data-intensive jobs.&lt;ref&gt;{{cite web |url=
http://www.eng.auburn.edu/~xqin/pubs/hcw10.pdf |format=PDF |title= Improving MapReduce performance through data placement in heterogeneous Hadoop Clusters |date=April 2010 |publisher=Eng.auburn.ed }}&lt;/ref&gt;

HDFS was designed for mostly immutable files&lt;ref name=&quot;openlibrary1&quot; /&gt; and may not be suitable for systems requiring concurrent write-operations.

HDFS can be [[Mount (computing)|mounted]] directly with a [[Filesystem in Userspace]] (FUSE) [[virtual file system]] on [[Linux]] and some other [[Unix]] systems.

File access can be achieved through the native Java [[application programming interface]] (API), the [[Thrift (protocol)|Thrift]] API to generate a client in the language of the users' choosing (C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, [[Cocoa (API)|Cocoa]], Smalltalk, and [[OCaml]]), the [[command-line interface]], browsed through the HDFS-UI [[Web application]] (webapp) over [[HTTP]], or via 3rd-party network client libraries.&lt;ref&gt;{{cite web |url=https://wiki.apache.org/hadoop/MountableHDFS |title=Mounting HDFS |accessdate=May 2014 }}&lt;/ref&gt;

====Other file systems====
Hadoop works directly with any [[distributed file system]] that can be mounted by the underlying operating system simply by using a &lt;code&gt;file://&lt;/code&gt; URL; however, this comes at a price: the loss of locality. To reduce network traffic, Hadoop needs to know which servers are closest to the data; this is information that Hadoop-specific file system bridges can provide.

In May 2011, the list of supported file systems bundled with Apache Hadoop were:

* HDFS: Hadoop's own rack-aware file system.&lt;ref&gt;{{cite web |url=http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsUserGuide.html#Rack_Awareness |title=HDFS Users Guide&amp;nbsp;– Rack Awareness |publisher=Hadoop.apache.org |accessdate=2013-10-17 }}&lt;/ref&gt; This is designed to scale to tens of petabytes of storage and runs on top of the file systems of the underlying [[operating system]]s.
* [[FTP]] File system: this stores all its data on remotely accessible FTP servers.
* [[Amazon Simple Storage Service|Amazon S3 (Simple Storage Service)]] file system. This is targeted at clusters hosted on the [[Amazon Elastic Compute Cloud]] server-on-demand infrastructure. There is no rack-awareness in this file system, as it is all remote.
* [http://azure.microsoft.com/en-us/documentation/articles/hdinsight-use-blob-storage Windows Azure Storage Blobs (WASB)] file system. WASB, an extension on top of HDFS, allows distributions of Hadoop to access data in Azure blob stores without moving the data permanently into the cluster.

A number of third-party file system bridges have also been written, none of which are currently in Hadoop distributions. However, some commercial distributions of Hadoop ship with an alternative filesystem as the default—specifically IBM and MapR.

* In 2009, [[IBM]] discussed running Hadoop over the [[IBM General Parallel File System]].&lt;ref&gt;{{cite web |url=http://www.usenix.org/events/hotcloud09/tech/full_papers/ananthanarayanan.pdf |title= Cloud analytics: Do we really need to reinvent the storage stack? |date=June 2009 |publisher=IBM }}&lt;/ref&gt; The source code was published in October 2009.&lt;ref&gt;{{cite web |url=https://issues.apache.org/jira/browse/HADOOP-6330 |title=HADOOP-6330: Integrating IBM General Parallel File System implementation of Hadoop Filesystem interface |date=2009-10-23 |publisher=IBM }}&lt;/ref&gt;
* In April 2010, [[Parascale]] published the source code to run Hadoop against the Parascale file system.&lt;ref&gt;{{cite web |url=https://issues.apache.org/jira/browse/HADOOP-6704 |title=HADOOP-6704: add support for Parascale filesystem |date=2010-04-14 |publisher=Parascale }}&lt;/ref&gt;
* In April 2010, [[Appistry]] released a Hadoop file system driver for use with its own CloudIQ Storage product.&lt;ref&gt;{{cite web |url=http://resources.appistry.com/news-and-events/press/06072010-appistry-cloudiq-storage-now-generally-available |title=HDFS with CloudIQ Storage |date=2010-07-06 |publisher=Appistry,Inc. }}&lt;/ref&gt;
* In June 2010, [[Hewlett-Packard|HP]] discussed a location-aware [[IBRIX Fusion]] file system driver.&lt;ref&gt;{{cite web |url=http://www.slideshare.net/steve_l/high-availability-hadoop |title=High Availability Hadoop |date=2010-06-09 |publisher=HP }}&lt;/ref&gt;
* In May 2011, [[MapR]] Technologies, Inc. announced the availability of an alternative file system for Hadoop, which replaced the HDFS file system with a full random-access read/write file system.

===JobTracker and TaskTracker: the MapReduce engine===
{{main|MapReduce}}

Above the file systems comes the [[MapReduce]] Engine, which consists of one ''JobTracker'', to which client applications submit MapReduce jobs. The JobTracker pushes work out to available ''TaskTracker'' nodes in the cluster, striving to keep the work as close to the data as possible. With a rack-aware file system, the JobTracker knows which node contains the data, and which other machines are nearby. If the work cannot be hosted on the actual node where the data resides, priority is given to nodes in the same rack. This reduces network traffic on the main backbone network. If a TaskTracker fails or times out, that part of the job is rescheduled. The TaskTracker on each node spawns a separate [[Java Virtual Machine]] process to prevent the TaskTracker itself from failing if the running job crashes its JVM. A heartbeat is sent from the TaskTracker to the JobTracker every few minutes to check its status. The Job Tracker and TaskTracker status and information is exposed by [[Jetty (web server)|Jetty]] and can be viewed from a web browser.

Known limitations of this approach are:
* The allocation of work to TaskTrackers is very simple. Every TaskTracker has a number of available ''slots'' (such as &quot;4 slots&quot;). Every active map or reduce task takes up one slot. The Job Tracker allocates work to the tracker nearest to the data with an available slot. There is no consideration of the current [[load (computing)|system load]] of the allocated machine, and hence its actual availability.
* If one TaskTracker is very slow, it can delay the entire MapReduce job—especially towards the end of a job, where everything can end up waiting for the slowest task. With speculative execution enabled, however, a single task can be executed on multiple slave nodes.

====Scheduling====
By default Hadoop uses [[FIFO (computing and electronics)|FIFO]] scheduling, and optionally 5 scheduling priorities to schedule jobs from a work queue.&lt;ref&gt;[http://hadoop.apache.org/common/docs/current/commands_manual.html#job job] {{wayback|url=http://hadoop.apache.org/common/docs/current/commands_manual.html#job |date=20110817053520 }}&lt;/ref&gt; In version 0.19 the job scheduler was refactored out of the JobTracker, while adding the ability to use an alternate scheduler (such as the ''Fair scheduler'' or the ''Capacity scheduler'', described next).&lt;ref&gt;{{cite web |title=Refactor the scheduler out of the JobTracker |url=https://issues.apache.org/jira/browse/HADOOP-3412 |work=Hadoop Common |publisher=Apache Software Foundation |accessdate=9 June 2012 }}&lt;/ref&gt;

=====Fair scheduler=====
The fair scheduler was developed by [[Facebook]].&lt;ref&gt;{{cite web |url=http://www.ibm.com/developerworks/library/os-hadoop-scheduling/ |title=Scheduling in Hadoop |first=M. Tim |last=Jones |date=6 December 2011 |website=ibm.com |publisher=[[IBM]] |accessdate=20 November 2013 }}&lt;/ref&gt; The goal of the fair scheduler is to provide fast response times for small jobs and [[Quality of service|QoS]] for production jobs. The fair scheduler has three basic concepts.&lt;ref&gt;[https://svn.apache.org/repos/asf/hadoop/common/branches/MAPREDUCE-233/src/contrib/fairscheduler/designdoc/fair_scheduler_design_doc.pdf Hadoop Fair Scheduler Design Document]&lt;/ref&gt;
# Jobs are grouped into [[Pool (computer science)|pools]].
# Each pool is assigned a guaranteed minimum share.
# Excess capacity is split between jobs.

By default, jobs that are uncategorized go into a default pool. Pools have to specify the minimum number of map slots, reduce slots, and a limit on the number of running jobs.

=====Capacity scheduler=====
The capacity scheduler was developed by [[Yahoo]]. The capacity scheduler supports several features that are similar to the fair scheduler.&lt;ref&gt;{{cite web|url=http://hadoop.apache.org/docs/stable1/capacity_scheduler.html|title=CapacityScheduler Guide|publisher=|accessdate=31 December 2015}}&lt;/ref&gt;

* Queues are allocated a fraction of the total resource capacity.
* Free resources are allocated to queues beyond their total capacity.
* Within a queue a job with a high level of priority has access to the queue's resources.

There is no [[preemption (computing)|preemption]] once a job is running.

===Other applications===
The HDFS file system is not restricted to MapReduce jobs. It can be used for other applications, many of which are under development at Apache. The list includes the [[HBase]] database, the [[Apache Mahout]] [[machine learning]] system, and the [[Apache Hive]] [[Data Warehouse]] system. Hadoop can in theory be used for any sort of work that is batch-oriented rather than real-time, is very data-intensive, and benefits from parallel processing of data. It can also be used to complement a real-time system, such as [[lambda architecture]].

{{As of|2009|10}}, commercial applications of Hadoop&lt;ref&gt;{{cite web |date=10 October 2009 |url=http://www.dbms2.com/2009/10/10/enterprises-using-hadoo/ |title=&quot;How 30+ enterprises are using Hadoop&quot;, in DBMS2 |publisher=Dbms2.com |accessdate=2013-10-17 }}&lt;/ref&gt; included:
* Log and/or clickstream analysis of various kinds
* Marketing analytics
* Machine learning and/or sophisticated data mining
* Image processing
* Processing of XML messages
* Web crawling and/or text processing
* General archiving, including of relational/tabular data, e.g. for compliance

==Prominent users==

On February 19, 2008, [[Yahoo! Inc.]] launched what it claimed was the world's largest Hadoop production application. The Yahoo! Search Webmap is a Hadoop application that runs on a Linux cluster with more than 10,000 [[Multi-core|core]]s and produced data that was used in every Yahoo! web search query.&lt;ref&gt;{{cite web|url=https://developer.yahoo.com/blogs/hadoop/yahoo-launches-world-largest-hadoop-production-application-398.html|title=Yahoo! Launches World’s Largest Hadoop Production Application|date=19 February 2008|work=Yahoo|accessdate=31 December 2015}}&lt;/ref&gt;  There are multiple Hadoop clusters at Yahoo! and no HDFS file systems or MapReduce jobs are split across multiple datacenters. Every Hadoop cluster node bootstraps the Linux image, including the Hadoop distribution. Work that the clusters perform is known to include the index calculations for the Yahoo! search engine. In June 2009, Yahoo! made the source code of the Hadoop version it runs available to the public via the open-source community.&lt;ref&gt;{{cite web |url=http://developer.yahoo.com/hadoop/ |title=Hadoop and Distributed Computing at Yahoo! |publisher=Yahoo! |date=2011-04-20 |accessdate=2013-10-17 }}&lt;/ref&gt;

In 2010, [[Facebook]] claimed that they had the largest Hadoop cluster in the world with 21 [[Petabyte|PB]] of storage.&lt;ref&gt;{{cite web |url=http://hadoopblog.blogspot.com/2010/05/facebook-has-worlds-largest-hadoop.html |title=HDFS: Facebook has the world's largest Hadoop cluster! |publisher=Hadoopblog.blogspot.com |date=2010-05-09 |accessdate=2012-05-23 }}&lt;/ref&gt; In June 2012, they announced the data had grown to 100 PB&lt;ref&gt;{{cite web |url=http://www.facebook.com/notes/facebook-engineering/under-the-hood-hadoop-distributed-filesystem-reliability-with-namenode-and-avata/10150888759153920 |title=Under the Hood: Hadoop Distributed File system reliability with Namenode and Avatarnode |publisher=Facebook |accessdate=2012-09-13 }}&lt;/ref&gt; and later that year they announced that the data was growing by roughly half a PB per day.&lt;ref&gt;{{cite web |url=https://www.facebook.com/notes/facebook-engineering/under-the-hood-scheduling-mapreduce-jobs-more-efficiently-with-corona/10151142560538920 |title=Under the Hood: Scheduling MapReduce jobs more efficiently with Corona |publisher=Facebook |accessdate=2012-11-09 }}&lt;/ref&gt;

{{As of|2013}}, Hadoop adoption had become widespread: more than half of the Fortune 50 used Hadoop.&lt;ref&gt;{{cite press release &lt;!-- |author=Staff writer(s); no by-line.--&gt; |title=Altior's AltraSTAR – Hadoop Storage Accelerator and Optimizer Now Certified on CDH4 (Cloudera's Distribution Including Apache Hadoop Version 4) |url=http://www.prnewswire.com/news-releases/altiors-altrastar---hadoop-storage-accelerator-and-optimizer-now-certified-on-cdh4-clouderas-distribution-including-apache-hadoop-version-4-183906141.html |location=Eatontown, NJ |publisher=Altior Inc. |date=2012-12-18 |accessdate=2013-10-30 }}&lt;/ref&gt;

==Hadoop hosting in the Cloud==
Hadoop can be deployed in a traditional onsite datacenter as well as in the cloud.&lt;ref&gt;{{cite web |title=What is Hadoop? |url=http://azure.microsoft.com/en-us/solutions/hadoop/ }}&lt;/ref&gt; The cloud allows organizations to deploy Hadoop without hardware to acquire or specific setup expertise.&lt;ref&gt;{{cite web |url=http://azure.microsoft.com/en-us/solutions/hadoop/ |title=Hadoop |publisher=Azure.microsoft.com |accessdate=2014-07-22 }}&lt;/ref&gt; Vendors who currently have an offer for the cloud include [[Microsoft]], [[Amazon.com|Amazon]], [[IBM]],&lt;ref&gt;{{cite web |url=http://www-03.ibm.com/software/products/en/ibm-biginsights-on-cloud |title=ibm-biginsights-on-cloud }}&lt;/ref&gt; [[Google]] and [[Oracle]].&lt;ref&gt;{{cite web |url=http://searchoracle.techtarget.com/feature/Oracles-cloud-analytics-platform-comprises-several-tools|title=Oracle's cloud analytics platform comprises several tools|accessdate=8 April 2016}}&lt;/ref&gt;

===On Microsoft Azure===
Azure [[HDInsight]]&lt;ref name=&quot;azure.microsoft.com&quot;&gt;{{cite web |url=http://azure.microsoft.com/en-us/services/hdinsight/ |title=HDInsight &amp;#124; Cloud Hadoop |publisher=Azure.microsoft.com |accessdate=2014-07-22 }}&lt;/ref&gt; is a service that deploys Hadoop on [[Microsoft Azure]]. HDInsight uses [[Hortonworks]] HDP and was jointly developed for HDI with [[Hortonworks]]. HDI allows programming extensions with .NET (in addition to Java). HDInsight also supports creation of Hadoop clusters using Linux with Ubuntu.&lt;ref name=&quot;azure.microsoft.com&quot; /&gt; By deploying HDInsight in the cloud, organizations can spin up the number of nodes they want and only get charged for the compute and storage that is used.&lt;ref name=&quot;azure.microsoft.com&quot; /&gt; [[Hortonworks]] implementations can also move data from the on-premises datacenter to the cloud for backup, development/test, and bursting scenarios.&lt;ref name=&quot;azure.microsoft.com&quot; /&gt;
It is also possible to run Cloudera or Hortonworks Hadoop clusters on Azure Virtual Machines.

===On Amazon EC2/S3 services===
It is possible to run Hadoop on [[Amazon Elastic Compute Cloud]] (EC2) and [[Amazon Simple Storage Service]] (S3).&lt;ref&gt;{{cite web |last=Varia |first=Jinesh (@jinman) |title=Taking Massive Distributed Computing to the Common Man – Hadoop on Amazon EC2/S3 |url=http://aws.typepad.com/aws/2008/02/taking-massive.html |work=Amazon Web Services Blog |publisher=Amazon.com |accessdate=9 June 2012 }}&lt;/ref&gt; As an example, [[The New York Times]] used 100 Amazon EC2 instances and a Hadoop application to process 4&amp;nbsp;TB of raw image [[TIFF]] data (stored in S3) into 11 million finished [[PDF]]s in the space of 24 hours at a computation cost of about $240 (not including bandwidth).&lt;ref&gt;{{cite news |url=http://open.blogs.nytimes.com/2007/11/01/self-service-prorated-super-computing-fun/?scp=1&amp;sq=self%20service%20prorated&amp;st=cse |work=The New York Times |title=Self-service, Prorated Super Computing Fun! |first=Derek |last=Gottfrid |date=1 November 2007 |accessdate=4 May 2010}}&lt;/ref&gt;

There is support for the S3 object store in the Apache Hadoop releases, though this is below what one expects from a traditional POSIX filesystem. Specifically, operations such as rename() and delete() on directories are not atomic, and can take time proportional to the number of entries and the amount of data in them.

===Amazon Elastic MapReduce===
Elastic MapReduce (EMR)&lt;ref&gt;{{cite web |url=http://aws.amazon.com/elasticmapreduce/ |title=AWS &amp;#124; Amazon Elastic MapReduce (EMR) &amp;#124; Hadoop MapReduce in the Cloud |publisher=Aws.amazon.com |accessdate=2014-07-22 }}&lt;/ref&gt; was introduced by [[Amazon.com]] in April 2009. Provisioning of the Hadoop cluster, running and terminating jobs, and handling data transfer between EC2(VM) and S3(Object Storage) are automated by Elastic MapReduce. [[Apache Hive]], which is built on top of Hadoop for providing data warehouse services, is also offered in Elastic MapReduce.&lt;ref&gt;{{cite web |url=http://s3.amazonaws.com/awsdocs/ElasticMapReduce/latest/emr-dg.pdf |title=Amazon Elastic MapReduce Developer Guide |format=PDF |accessdate=2013-10-17 }}&lt;/ref&gt;

Support for using Spot Instances&lt;ref&gt;{{cite web |url=http://aws.amazon.com/ec2/spot-instances/ |title=Amazon EC2 Spot Instances |publisher=Aws.amazon.com |accessdate=2014-07-22 }}&lt;/ref&gt; was later added in August 2011.&lt;ref&gt;{{cite web |url=http://aws.amazon.com/about-aws/whats-new/2011/08/18/amazon-elastic-mapreduce-now-supports-spot-instances/ |title=Amazon Elastic MapReduce Now Supports Spot Instances |publisher=Amazon.com |date=2011-08-18 |accessdate=2013-10-17 }}&lt;/ref&gt; Elastic MapReduce is fault-tolerant for slave failures,&lt;ref&gt;{{cite web |url=http://aws.amazon.com/elasticmapreduce/faqs/#cluster-10 |title=Amazon Elastic MapReduce FAQs |publisher=Amazon.com |accessdate=2013-10-17 }}&lt;/ref&gt; and it is recommended to only run the Task Instance Group on spot instances to take advantage of the lower cost while maintaining availability.&lt;ref&gt;{{Youtube |id=66rfnFA0jpM |title=Using Spot Instances with EMR }}&lt;/ref&gt;

===On CenturyLink Cloud (CLC)===
CenturyLink Cloud &lt;ref&gt;{{cite web|url=http://ctl.io|title=Cloud Computing Services and Managed Services - CenturyLink Cloud|publisher=}}&lt;/ref&gt; offers Hadoop via both a managed and un-managed model via their Hadoop&lt;ref&gt;{{cite web|url=https://www.ctl.io/managed-services/cloudera/|title=Managed Cloudera|publisher=}}&lt;/ref&gt; offering. CLC also offers customers several managed Cloudera Blueprints, the newest managed service in the CenturyLink Cloud big data Blueprints portfolio, which also includes Cassandra and MongoDB solutions.&lt;ref&gt;{{cite web|url=https://www.ctl.io/blog/post/hadoop-simplified-managed-cloudera-centurylink-cloud/|title=Hadoop Simplified: Managed Cloudera &amp;amp;amp; CenturyLink Cloud - CenturyLink Cloud|publisher=}}&lt;/ref&gt;

===Google Cloud Platform===
There are multiple ways to run the Hadoop ecosystem on [[Google Cloud Platform]] ranging from self-managed to Google-managed.&lt;ref&gt;{{cite web|title=Hadoop on Google Cloud Platform|url=https://cloud.google.com/hadoop/}}&lt;/ref&gt;

* [[Google Cloud Dataproc]] — A managed Spark and Hadoop service&lt;ref&gt;{{cite web|title=Google Cloud Dataproc Official Website|url=https://cloud.google.com/dataproc/}}&lt;/ref&gt;
* [https://cloud.google.com/hadoop/bdutil Command line tools (bdutil)] — A collection of shell scripts to manually create and manage Spark and Hadoop clusters&lt;ref&gt;{{cite web|title=Hadoop on Google Cloud Platform - Command-Line Deployment|url=https://cloud.google.com/hadoop/setting-up-a-hadoop-cluster}}&lt;/ref&gt;
* Third party Hadoop distributions:
** Cloudera — Using the Cloudera Director Plugin for Google Cloud Platform&lt;ref&gt;{{cite web|title=Cloudera now Certified on Google Cloud Platform|url=https://vision.cloudera.com/cloudera-now-certified-on-google-cloud-platform/}}&lt;/ref&gt;
** Hortonworks — Using bdutil support for Hortonworks HDP&lt;ref&gt;{{cite web|title=HDP on Google Cloud Platform|url=http://hortonworks.com/blog/hdp-google-cloud-platform/}}&lt;/ref&gt;
** MapR — Using bdutil support for MapR&lt;ref&gt;{{cite web|title=MapR Google Cloud Platform|url=https://www.mapr.com/resources/mapr-google-cloud-platform}}&lt;/ref&gt;

Google also offers connectors for using other Google Cloud Platform products with Hadoop, such as a [https://www.mapr.com/resources/mapr-google-cloud-platform Google Cloud Storage connector] for using [[Google Storage|Google Cloud Storage]] and a [https://cloud.google.com/hadoop/bigquery-connector Google BigQuery connector] for using [[BigQuery|Google BigQuery]].

==Commercial support==
&lt;!--
Please don't go overboard in marketing here, as it will only be edited out. Use external citations rather than press releases, and be aware of Wikipedia's rules regarding conflict of interest and external links, WP:COI and WP:EL specifically
--&gt;
A number of companies offer commercial implementations or support for Hadoop.&lt;ref&gt;{{cite web |url=http://gigaom.com/cloud/why-we-need-more-hadoop-innovation/ |title=Why the Pace of Hadoop Innovation Has to Pick Up |publisher=Gigaom.com |date=2011-04-25 |accessdate=2013-10-17 }}&lt;/ref&gt;

===ASF's view on the use of &quot;Hadoop&quot; in product names===
The Apache Software Foundation has stated that only software officially released by the Apache Hadoop Project can be called ''Apache Hadoop'' or ''Distributions of Apache Hadoop''.&lt;ref&gt;{{cite web |url=http://wiki.apache.org/hadoop/Defining%20Hadoop |title=Defining Hadoop |publisher=Wiki.apache.org |date=2013-03-30 |accessdate=2013-10-17 }}&lt;/ref&gt; The naming of products and derivative works from other vendors and the term &quot;compatible&quot; are somewhat controversial within the Hadoop developer community.&lt;ref&gt;{{cite web |url=http://mail-archives.apache.org/mod_mbox/hadoop-general/201105.mbox/%3C4DC91392.2010308@apache.org%3E |title=Defining Hadoop Compatibility: revisited |publisher=Mail-archives.apache.org |date=2011-05-10 |accessdate=2013-10-17 }}&lt;/ref&gt;

==Papers==
Some papers influenced the birth and growth of Hadoop and big data processing. Here is a partial list:
* Jeffrey Dean, Sanjay Ghemawat (2004) [https://www.usenix.org/legacy/publications/library/proceedings/osdi04/tech/full_papers/dean/dean_html/index.html MapReduce: Simplified Data Processing on Large Clusters], Google. This paper inspired Doug Cutting to develop an open-source implementation of the Map-Reduce framework. He named it Hadoop, after his son's toy elephant.
* Michael Franklin, Alon Halevy, David Maier (2005) [http://www.eecs.berkeley.edu/~franklin/Papers/dataspaceSR.pdf From Databases to Dataspaces: A New Abstraction for Information Management]. The authors highlight the need for storage systems to accept all data formats and to provide APIs for data access that evolve based on the storage system’s understanding of the data.
* Fay Chang et al.&lt;!-- Jeffrey Dean, Sanjay Ghemawat, Wilson C. Hsieh, Deborah A. Wallach, Mike Burrows, Tushar Chandra, Andrew Fikes, Robert E. Gruber --&gt; (2006) [http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/bigtable-osdi06.pdf Bigtable: A Distributed Storage System for Structured Data], Google.
* Robert Kallman et al.&lt;!-- Hideaki Kimura, Jonathan Natkins, Andrew Pavlo, Alexander Rasin, Stanley Zdonik, Evan P. C. Jones, Samuel Madden, Michael Stonebraker, Yang Zhang, John Hugg, Daniel J. Abadi --&gt; (2008) [http://www.vldb.org/pvldb/1/1454211.pdf H-store: a high-performance, distributed main memory transaction processing system]

==See also==
{{Portal|Free software}}
* [[Apache Accumulo]] – Secure [[BigTable]]&lt;ref&gt;{{cite web |url=https://accumulo.apache.org/1.4/user_manual/Security.html |title=Apache Accumulo User Manual: Security &lt;!-- |author=Staff writer(s); no by-line.--&gt; |website=apache.org |publisher=Apache Software Foundation |accessdate=2014-12-03 }}&lt;/ref&gt;
* [[Apache Cassandra]] – A column-oriented database that supports access from Hadoop
* [[Apache CouchDB]] is a database that uses JSON for documents, JavaScript for MapReduce queries, and regular HTTP for an API
* [[Big data]]
* [[Cloud computing]]
* [[Data Intensive Computing]]
* [[HPCC]] – [[LexisNexis]] Risk Solutions High Performance Computing Cluster
* [[Hypertable]] – HBase alternative
* [[Sector/Sphere]] – Open source distributed storage and processing
* [[Simple Linux Utility for Resource Management]]

==References==
{{Reflist|2}}

==Bibliography==
{{Refbegin}}
*{{Cite book
| first1    = Chuck
| last1     = Lam
| date      = July 28, 2010
| title     = Hadoop in Action
| edition   = 1st
| publisher = [[Manning Publications]]
| page     = 325
| isbn      = 1-935-18219-6
| url       =
}}
*{{Cite book
| first1    = Jason
| last1     = Venner
| date      = June 22, 2009
| title     = Pro Hadoop
| edition   = 1st
| publisher = [[Apress]]
| page     = 440
| isbn      = 1-430-21942-4
| url       = http://www.apress.com/book/view/1430219424
}}
*{{Cite book
| first1    = Tom
| last1     = White
| date      = June 16, 2009
| title     = Hadoop: The Definitive Guide
| edition   = 1st
| publisher = [[O'Reilly Media]]
| page     = 524
| isbn      = 0-596-52197-9
| url       = http://oreilly.com/catalog/9780596521974
}}
{{Refend}}

==External links==
*{{Official website}}
*[http://apiwave.com/java/api/org.apache.hadoop Apache Hadoop popular APIs in GitHub]
*[http://www.stanford.edu/class/ee380/Abstracts/111116.html Introducing Apache Hadoop: The Modern Data Operating System] — lecture given at [[Stanford University]] by Co-Founder and CTO of Cloudera, Amr Awadallah ([http://ee380.stanford.edu/cgi-bin/videologger.php?target=111116-ee380-300.asx video archive]) ([http://www.youtube.com/watch?v=d2xeNpfzsYI YouTube])
* [http://www.se-radio.net/2010/03/episode-157-hadoop-with-philip-zeyliger/ Hadoop with Philip Zeyliger, Software Engineering Radio, IEEE Computer Society, March 8 2010]
{{Apache}}

{{Authority control}}

{{DEFAULTSORT:Hadoop}}
[[Category:Apache Software Foundation]]
[[Category:Big data products]]
[[Category:Cloud infrastructure]]
[[Category:Distributed file systems]]
[[Category:Free software for cloud computing]]
[[Category:Free software programmed in Java (programming language)]]
[[Category:Free system software]]
[[Category:Hadoop|*]]
[[Category:Software using the Apache license]]</text>
      <sha1>nj72jhhewg0be21yl2wgvsjfy3ki4rx</sha1>
    </revision>
  </page>
</mediawiki>
